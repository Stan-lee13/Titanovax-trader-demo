name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  # Security and Code Quality Analysis
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety pip-audit semgrep

      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt -o bandit-report.txt || true

      - name: Run Safety dependency check
        run: |
          safety check --json --output safety-report.json || true
          safety check --output safety-report.txt || true

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --format=markdown --output=pip-audit-report.md || true

      - name: Run Semgrep SAST
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto --output=semgrep-report.txt . || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.*
            safety-report.*
            pip-audit-report.*
            semgrep-report.*

      - name: Comment PR with security findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Read security reports
            let banditReport = '';
            let safetyReport = '';
            
            try {
              banditReport = fs.readFileSync('bandit-report.txt', 'utf8');
            } catch (e) {}
            
            try {
              safetyReport = fs.readFileSync('safety-report.txt', 'utf8');
            } catch (e) {}
            
            const comment = `## ðŸ”’ Security Scan Results
            
            ### Bandit Security Scan
            \`\`\`
            ${banditReport || 'No issues found'}
            \`\`\`
            
            ### Safety Dependency Check
            \`\`\`
            ${safetyReport || 'No issues found'}
            \`\`\`
            
            *Check the full reports in the workflow artifacts.*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Code Quality and Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy pylint pydocstyle
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run Black formatter check
        run: |
          black --check --diff --line-length 88 .

      - name: Run isort import sorter check
        run: |
          isort --check-only --diff .

      - name: Run Flake8 linter
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Run MyPy type checker
        run: |
          mypy . --ignore-missing-imports --install-types --non-interactive || true

      - name: Run Pylint
        run: |
          pylint --output-format=json --reports=no . > pylint-report.json || true
          pylint . > pylint-report.txt || true

      - name: Run Docstring check
        run: |
          pydocstyle . > docstring-report.txt || true

      - name: Upload code quality reports
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-reports-${{ matrix.python-version }}
          path: |
            pylint-report.*
            docstring-report.*
            mypy-report.*

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_titanovax
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pytest-mock pytest-asyncio
          pip install coverage codecov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

      - name: Generate test data
        run: |
          python scripts/generate_test_data.py

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --cov=. --cov-append --cov-report=xml --cov-report=html

      - name: Run ML model tests
        run: |
          pytest tests/ml/ -v --cov=. --cov-append --cov-report=xml --cov-report=html

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --benchmark-only

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
            .coverage

  # Build and Test Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for ML Brain
        id: meta-ml-brain
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/ml-brain
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ML Brain image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/ml-brain/Dockerfile
          push: true
          tags: ${{ steps.meta-ml-brain.outputs.tags }}
          labels: ${{ steps.meta-ml-brain.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for MT5 Executor
        id: meta-mt5-executor
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/mt5-executor
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push MT5 Executor image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/mt5-executor/Dockerfile
          push: true
          tags: ${{ steps.meta-mt5-executor.outputs.tags }}
          labels: ${{ steps.meta-mt5-executor.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Orchestration
        id: meta-orchestration
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/orchestration
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Orchestration image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/orchestration/Dockerfile
          push: true
          tags: ${{ steps.meta-orchestration.outputs.tags }}
          labels: ${{ steps.meta-orchestration.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Dashboard
        id: meta-dashboard
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Dashboard image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dashboard/Dockerfile
          push: true
          tags: ${{ steps.meta-dashboard.outputs.tags }}
          labels: ${{ steps.meta-dashboard.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ML Model Validation
  ml-model-validation:
    name: ML Model Validation
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install ML dependencies
        run: |
          pip install -r ml-brain/requirements.txt
          pip install mlflow onnxruntime optuna

      - name: Validate ML models
        run: |
          python scripts/validate_ml_models.py

      - name: Run model performance tests
        run: |
          python scripts/test_model_performance.py

      - name: Upload ML validation reports
        uses: actions/upload-artifact@v3
        with:
          name: ml-validation-reports
          path: |
            ml_validation_report.json
            model_performance_report.json

  # Performance Benchmarking
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d postgres redis

      - name: Run performance tests
        run: |
          python -m pytest tests/performance/ -v --benchmark-json=benchmark-results.json

      - name: Run load tests
        run: |
          python scripts/load_test.py

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            benchmark-results.json
            load_test_report.json

      - name: Cleanup test environment
        run: |
          docker-compose -f docker-compose.test.yml down

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, ml-model-validation, performance-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # This could be SSH deployment, Kubernetes, Docker Swarm, etc.

      - name: Run smoke tests
        run: |
          python scripts/smoke_test.py --environment staging

      - name: Notify deployment status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.deployment.id,
              state: 'success',
              description: 'Deployed to staging successfully'
            });

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, ml-model-validation, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # This should include proper rollback mechanisms

      - name: Run production health checks
        run: |
          python scripts/health_check.py --environment production

      - name: Notify deployment status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.deployment.id,
              state: 'success',
              description: 'Deployed to production successfully'
            });

  # Generate Release Notes
  release:
    name: Generate Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        run: |
          python scripts/generate_changelog.py

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  # Cleanup and Notification
  cleanup:
    name: Cleanup and Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Cleanup artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            security-reports
            code-quality-reports-*
            test-reports-*
            ml-validation-reports
            performance-reports

      - name: Notify team
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow