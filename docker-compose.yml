version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: titanovax-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-titanovax}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - titanovax-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-titanovax}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: titanovax-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - titanovax-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Brain Service
  ml-brain:
    build:
      context: .
      dockerfile: docker/ml-brain/Dockerfile
    container_name: titanovax-ml-brain
    environment:
      - ENVIRONMENT=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-titanovax}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ML_MODEL_TYPE=xgboost
      - RETRAIN_INTERVAL_HOURS=24
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - titanovax-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MT5 Executor Service
  mt5-executor:
    build:
      context: .
      dockerfile: docker/mt5-executor/Dockerfile
    container_name: titanovax-mt5-executor
    environment:
      - ENVIRONMENT=production
      - MT5_LOGIN=${MT5_LOGIN}
      - MT5_PASSWORD=${MT5_PASSWORD}
      - MT5_SERVER=${MT5_SERVER}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-titanovax}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MAX_RISK_PERCENT=2.0
      - DEFAULT_LOT_SIZE=0.1
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - mt5_terminal:/app/mt5_terminal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - titanovax-network
    restart: unless-stopped
    ports:
      - "8002:8002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Orchestration Service
  orchestration:
    build:
      context: .
      dockerfile: docker/orchestration/Dockerfile
    container_name: titanovax-orchestration
    environment:
      - ENVIRONMENT=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-titanovax}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ML_BRAIN_URL=http://ml-brain:8001
      - MT5_EXECUTOR_URL=http://mt5-executor:8002
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - API_KEY=${API_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ml-brain:
        condition: service_healthy
      mt5-executor:
        condition: service_healthy
    networks:
      - titanovax-network
    restart: unless-stopped
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard
  dashboard:
    build:
      context: .
      dockerfile: docker/dashboard/Dockerfile
    container_name: titanovax-dashboard
    environment:
      - REACT_APP_API_URL=http://orchestration:8000
      - REACT_APP_WS_URL=ws://orchestration:8000
    volumes:
      - ./logs:/app/logs
    depends_on:
      orchestration:
        condition: service_healthy
    networks:
      - titanovax-network
    restart: unless-stopped
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: titanovax-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - titanovax-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: titanovax-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - titanovax-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: titanovax-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - orchestration
      - dashboard
    networks:
      - titanovax-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mt5_terminal:
  prometheus_data:
  grafana_data:
  nginx_logs:

networks:
  titanovax-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16